var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.125,1,1.659]],["body/modules/AppModule.html",[0,1.842,1,3.154,2,1.446,3,1.446,4,1.882,5,1.882,6,1.446,7,1.882,8,1.882,9,2.579,10,2.579,11,2.669,12,0.047,13,2.348,14,2.446,15,1.882,16,1.882,17,0.579,18,0.494,19,0.494,20,3.185,21,3.351,22,0.836,23,1.128,24,3.185,25,3.185,26,0.579,27,0.027,28,0.035,29,0.035]],["title/classes/CreatePostDto.html",[27,0.024,30,1.449]],["body/classes/CreatePostDto.html",[12,0.047,17,0.195,18,0.167,19,0.167,22,0.614,26,0.195,27,0.02,28,0.016,29,0.016,30,0.939,31,0.431,32,2.871,33,0.736,34,0.195,35,0.837,36,1.85,37,2.364,38,2.364,39,2.364,40,2.735,41,2.364,42,2.364,43,3.597,44,2.129,45,3.111,46,2.913,47,1.142,48,1.848,49,1.633,50,1.075,51,3.3,52,3.735,53,1.759,54,1.473,55,2.532,56,1.075,57,1.122,58,1.075,59,1.075,60,1.819,61,1.819,62,2.364,63,1.819,64,1.075,65,1.644,66,1.075,67,1.075,68,2.781,69,1.473,70,1.473,71,1.819,72,1.819,73,1.075,74,1.075,75,1.819,76,3.377,77,1.075,78,1.473,79,1.473,80,1.075,81,2.781,82,1.075,83,2.735,84,1.819,85,1.819,86,1.819,87,1.075,88,1.075,89,1.819,90,1.819,91,2.364,92,1.819,93,1.819,94,1.819,95,1.819,96,1.075,97,1.075,98,1.075,99,1.075,100,2.781,101,2.781,102,1.473,103,1.819,104,1.819,105,1.819,106,1.819,107,1.819,108,1.075,109,1.075,110,2.519,111,1.075,112,1.522,113,1.819,114,2.252,115,1.473,116,1.473,117,1.075,118,1.075,119,1.075,120,1.819,121,1.075,122,1.819,123,1.075,124,1.075,125,1.245,126,1.075,127,2.364,128,1.075,129,1.819,130,1.819,131,1.838,132,2.462,133,1.904,134,1.819,135,0.87,136,0.87,137,1.075,138,0.488,139,1.075,140,1.075,141,0.736,142,1.245,143,1.075,144,0.736,145,2.519,146,2.913,147,0.736,148,1.075,149,1.075,150,1.075,151,1.075,152,1.075,153,1.075,154,1.075,155,1.075,156,1.075,157,2.364,158,0.87,159,1.075,160,0.87,161,1.075,162,1.914,163,1.075,164,1.075,165,1.819,166,1.819,167,1.245,168,0.87,169,1.075]],["title/classes/CreateProstMetaOptionsDto.html",[27,0.024,65,1.659]],["body/classes/CreateProstMetaOptionsDto.html",[12,0.046,17,0.595,18,0.508,19,0.508,22,0.595,26,0.595,27,0.036,28,0.036,29,0.036,31,1.312,32,3.189,34,0.595,35,1.492,47,1.018,48,1.688,49,1.688,53,1.867,57,1.16,65,2.49,131,2.907,133,2.884,138,1.486,142,3.189,162,3.773,167,2.884,170,2.651,171,3.274,172,3.274,173,3.274,174,3.274]],["title/classes/CreateUserDto.html",[27,0.024,175,1.449]],["body/classes/CreateUserDto.html",[12,0.046,17,0.449,18,0.383,19,0.383,22,0.449,26,0.449,27,0.03,28,0.03,29,0.03,31,0.989,34,0.449,35,1.233,47,1.058,48,2.016,49,1.756,57,1.207,102,2.82,131,2.589,132,2.384,133,2.999,135,1.999,136,1.999,138,1.121,158,3.267,175,1.797,176,3.742,177,1.69,178,3.267,179,3.267,180,4.034,181,4.034,182,2.469,183,2.469,184,2.469,185,2.469,186,2.469,187,2.469,188,2.469,189,4.382,190,3.482,191,3.482,192,3.482,193,3.482,194,3.482,195,4.795,196,3.482,197,1.581,198,3.482,199,3.482,200,2.469,201,3.482,202,2.469,203,3.482,204,2.469]],["title/classes/GetUsersParamDto.html",[27,0.024,205,1.449]],["body/classes/GetUsersParamDto.html",[12,0.047,17,0.561,18,0.479,19,0.479,22,0.823,26,0.561,27,0.039,28,0.035,29,0.035,31,1.237,34,0.561,35,1.436,36,1.841,47,1.094,49,1.237,55,2.093,57,0.85,112,1.093,132,2.776,138,1.401,144,2.113,146,3.284,197,2.056,205,2.093,206,3.284,207,2.396,208,2.5,209,2.952,210,3.087,211,3.284,212,4.055,213,3.087,214,3.087,215,3.284,216,2.5,217,2.5]],["title/classes/PatchPostDto.html",[27,0.024,218,1.659]],["body/classes/PatchPostDto.html",[12,0.047,17,0.566,18,0.483,19,0.483,22,0.827,26,0.566,27,0.035,28,0.035,29,0.035,30,1.608,31,1.248,33,2.132,34,0.566,35,1.444,47,0.752,49,1.248,51,3.303,53,1.634,55,2.105,57,0.858,112,1.103,131,2.41,138,1.414,141,2.132,145,3.303,147,2.132,197,1.414,209,2.852,215,3.303,217,2.522,218,2.41,219,3.303,220,3.303,221,4.079,222,3.114,223,3.114,224,3.114,225,2.522,226,2.522,227,3.114]],["title/classes/PatchUserDto.html",[27,0.024,228,1.659]],["body/classes/PatchUserDto.html",[12,0.047,17,0.637,18,0.544,19,0.544,22,0.8,26,0.637,27,0.03,28,0.038,29,0.038,31,1.403,34,0.637,35,1.557,47,0.846,57,0.965,141,2.397,175,1.808,177,2.397,197,1.997,209,2.841,220,3.561,225,2.836,228,2.599,229,3.561,230,4.398,231,3.502,232,2.836,233,2.836,234,2.836]],["title/controllers/PostsController.html",[235,1.449,236,1.659]],["body/controllers/PostsController.html",[12,0.048,17,0.346,18,0.295,19,0.295,22,0.756,23,0.673,26,0.346,27,0.016,28,0.025,29,0.025,30,2.257,34,0.346,36,1.575,44,1.969,47,0.838,48,1.39,49,1.39,52,3.133,53,1.874,56,1.7,57,0.956,112,1.37,216,1.539,218,2.286,226,2.329,235,0.981,236,1.7,237,0.981,238,1.539,239,1.539,240,1.901,241,1.7,242,2.829,243,3.47,244,3.47,245,3.47,246,1.901,247,1.901,248,2.876,249,2.876,250,3.869,251,1.901,252,3.869,253,3.133,254,1.901,255,1.901,256,2.05,257,2.05,258,2.456,259,2.329,260,1.901,261,2.876,262,1.901,263,2.329,264,1.901,265,1.901,266,2.876,267,2.876,268,3.133,269,2.876,270,1.901,271,2.876,272,1.539,273,2.81,274,2.329,275,1.575,276,1.539,277,2.81,278,2.81,279,1.539,280,1.539,281,1.539,282,1.901,283,1.901,284,1.539,285,1.301,286,1.901,287,1.901,288,1.123,289,1.901,290,2.329,291,1.901,292,1.901,293,1.901,294,1.901]],["title/modules/PostsModule.html",[0,1.125,11,1.449]],["body/modules/PostsModule.html",[0,1.799,2,1.377,3,1.377,4,1.793,5,1.793,6,1.377,7,2.653,8,1.793,11,2.727,12,0.047,13,2.255,14,2.369,15,1.793,16,1.793,17,0.552,18,0.471,19,0.471,21,2.457,22,0.869,23,1.074,26,0.552,27,0.026,28,0.034,29,0.034,236,2.653,237,2.069,275,2.316,276,2.457,295,2.457,296,2.457,297,3.034,298,3.034,299,3.034,300,3.034,301,3.034]],["title/injectables/PostsService.html",[275,1.275,302,1.449]],["body/injectables/PostsService.html",[12,0.048,17,0.506,18,0.432,19,0.432,22,0.688,23,0.985,26,0.506,27,0.024,28,0.032,29,0.032,34,0.506,36,1.717,46,3.735,47,0.914,48,1.722,54,3.735,57,1.042,125,3.157,211,3.906,241,2.235,242,2.54,256,2.235,257,2.235,258,1.644,263,2.252,275,1.717,285,1.904,288,1.644,302,1.952,303,1.904,304,2.252,305,3.063,306,3.782,307,2.781,308,1.994,309,2.781,310,3.782,311,2.781,312,2.781,313,2.781,314,2.781,315,2.781,316,2.781]],["title/controllers/UsersController.html",[235,1.449,317,1.659]],["body/controllers/UsersController.html",[12,0.047,17,0.287,18,0.245,19,0.245,22,0.738,23,0.56,26,0.287,27,0.014,28,0.021,29,0.021,34,0.287,36,1.402,44,1.082,47,1.026,48,0.633,49,1.238,53,1.405,55,1.81,56,1.473,57,0.851,69,2.84,70,2.84,77,2.601,112,1.436,168,2.019,175,2.094,197,2.243,205,2.094,207,2.397,228,2.397,234,2.019,235,0.816,237,0.816,239,1.28,241,1.473,242,2.677,253,2.019,256,1.825,257,2.256,258,1.825,259,1.28,268,2.019,272,2.019,273,2.501,274,2.501,277,2.019,278,2.019,279,1.28,280,1.28,281,1.28,284,1.28,285,1.082,288,2.072,290,1.28,308,1.238,317,1.473,318,1.28,319,3.088,320,3.088,321,3.088,322,1.58,323,3.817,324,3.817,325,1.58,326,1.58,327,1.58,328,1.58,329,3.285,330,1.58,331,2.493,332,2.493,333,2.493,334,1.58,335,2.493,336,2.493,337,1.58,338,2.493,339,2.493,340,2.493,341,3.507,342,1.58,343,2.493,344,2.493,345,2.493,346,1.58,347,3.088,348,1.58,349,1.28,350,1.28,351,1.28,352,3.088,353,1.58,354,1.58,355,1.58,356,1.58,357,1.58,358,1.58,359,1.58,360,1.58,361,1.58,362,1.58,363,1.58,364,1.58,365,1.58,366,1.58,367,1.58]],["title/modules/UsersModule.html",[0,1.125,13,1.275]],["body/modules/UsersModule.html",[0,1.819,2,1.408,3,1.408,4,1.832,5,1.832,6,1.408,7,2.682,8,2.403,12,0.047,13,2.375,14,2.403,15,1.832,16,1.832,17,0.564,18,0.481,19,0.481,22,0.825,23,1.098,26,0.564,27,0.027,28,0.035,29,0.035,237,2.099,308,2.187,317,2.682,351,2.511,368,2.511,369,2.511,370,2.511,371,3.1,372,3.1,373,3.1]],["title/injectables/UsersService.html",[302,1.449,308,1.125]],["body/injectables/UsersService.html",[12,0.048,17,0.425,18,0.363,19,0.363,22,0.609,23,0.828,26,0.425,27,0.034,28,0.029,29,0.029,34,0.425,36,1.521,47,0.809,48,1.813,57,0.922,77,2.313,112,0.828,178,3.462,179,3.462,197,2.138,205,2.431,207,2.674,209,1.381,241,1.979,242,2.783,256,1.979,257,1.979,258,1.979,288,1.979,302,1.729,303,1.6,305,3.17,308,1.342,329,3.17,349,1.893,350,1.893,374,1.893,375,3.349,376,2.712,377,3.349,378,3.349,379,3.349,380,3.349,381,2.337,382,2.337,383,3.349,384,3.349,385,3.349,386,2.337,387,2.337,388,2.337,389,3.349,390,3.349]],["title/coverage.html",[391,2.606]],["body/coverage.html",[6,1.304,12,0.047,19,0.446,27,0.043,28,0.033,29,0.033,30,1.483,32,2.646,33,2.646,47,0.694,53,1.151,56,1.697,65,1.697,142,1.966,170,2.326,175,1.483,176,2.326,177,2.646,205,1.483,206,2.326,207,1.697,208,2.326,218,1.697,219,2.326,228,1.697,229,2.326,235,1.995,236,1.697,238,2.326,275,1.304,302,1.995,304,2.326,308,1.151,317,1.697,318,2.326,374,2.326,376,2.326,391,1.966,392,2.872,393,2.872,394,2.872,395,2.326,396,2.872,397,5.343,398,2.872,399,3.865,400,2.872,401,4.369,402,3.865,403,2.872,404,2.872,405,2.872,406,2.872]],["title/dependencies.html",[3,1.53,407,1.909]],["body/dependencies.html",[3,1.622,12,0.048,23,1.265,27,0.038,28,0.038,29,0.038,138,1.622,144,2.446,147,2.446,232,2.894,233,2.894,408,3.574,409,3.574,410,4.852,411,3.574,412,3.574,413,3.574,414,3.574,415,3.574,416,3.574,417,3.574,418,3.574,419,3.574,420,3.574,421,3.574,422,3.574]],["title/miscellaneous/enumerations.html",[423,1.393,424,2.729]],["body/miscellaneous/enumerations.html",[12,0.047,28,0.037,29,0.037,34,0.628,40,3.528,53,1.746,77,2.575,78,3.528,79,3.528,83,3.528,110,3.528,114,3.528,115,3.528,116,3.528,167,3.714,423,2.039,424,2.794,425,3.451,426,3.451,427,3.451,428,3.451]],["title/miscellaneous/functions.html",[423,1.393,429,2.729]],["body/miscellaneous/functions.html",[6,2.354,12,0.042,28,0.042,29,0.042,34,0.758,395,3.375,423,2.463,429,3.375,430,4.167]],["title/index.html",[34,0.429,431,2.357,432,2.357]],["body/index.html",[12,0.047,18,0.427,28,0.032,29,0.032,55,2.205,112,0.973,125,2.568,160,2.226,391,1.881,433,2.749,434,2.749,435,3.752,436,2.749,437,2.749,438,2.749,439,2.749,440,2.749,441,2.749,442,4.272,443,2.749,444,2.749,445,2.749,446,5.075,447,2.749,448,2.749,449,2.749,450,4.958,451,2.749,452,2.749,453,3.752,454,2.749,455,2.749,456,2.749,457,2.749,458,3.752,459,2.749,460,2.749,461,2.749,462,3.752,463,3.752,464,2.749,465,2.749,466,2.749,467,2.749,468,2.749,469,2.226,470,2.749,471,2.749,472,2.749,473,2.749,474,2.749,475,2.749,476,2.749,477,2.749,478,2.749,479,2.749,480,2.226,481,2.749,482,2.749,483,2.749,484,2.749,485,2.749,486,2.749,487,2.226]],["title/modules.html",[2,1.728]],["body/modules.html",[1,2.351,2,1.806,11,2.054,12,0.041,13,1.806,28,0.041,29,0.041,469,4.119,488,5.086,489,5.086,490,5.086]],["title/overview.html",[491,3.083]],["body/overview.html",[0,1.259,1,3.045,2,1.426,3,1.426,4,1.857,5,1.857,6,1.426,7,1.857,8,1.857,9,2.544,10,2.544,11,2.709,12,0.046,13,2.383,14,2.424,15,1.857,16,1.857,28,0.035,29,0.035,31,1.259,237,1.622,275,2.074,295,2.544,296,2.544,303,2.151,308,2.103,368,2.544,369,2.544,370,2.544,491,2.544,492,3.142,493,4.102,494,3.142]],["title/properties.html",[35,1.193,407,1.909]],["body/properties.html",[12,0.047,28,0.041,29,0.041,35,1.45,112,1.45,480,3.316,487,3.316,495,4.094,496,4.094,497,4.094]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":397,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":496,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":400,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":401,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":399,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":402,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":403,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":85,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":345,"title":{},"body":{"controllers/UsersController.html":{}}}],["1.1.26",{"_index":409,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":357,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":410,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":342,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":217,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["1234'})@isint()@isnotempty",{"_index":223,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":213,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":86,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":493,"title":{},"body":{"overview.html":{}}}],["2.0.6",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":405,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":268,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":250,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":84,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3",{"_index":492,"title":{},"body":{"overview.html":{}}}],["6",{"_index":494,"title":{},"body":{"overview.html":{}}}],["66",{"_index":404,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":101,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alice",{"_index":389,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":390,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":470,"title":{},"body":{"index.html":{}}}],["api",{"_index":344,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":277,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":247,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":222,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apipropertyoptional",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":210,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["apiquery",{"_index":352,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":278,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":279,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":283,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":355,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":448,"title":{},"body":{"index.html":{}}}],["applications",{"_index":441,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":68,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["assign",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["author",{"_index":480,"title":{},"body":{"index.html":{},"properties.html":{}}}],["backers",{"_index":471,"title":{},"body":{"index.html":{}}}],["based",{"_index":336,"title":{},"body":{"controllers/UsersController.html":{}}}],["blog",{"_index":52,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["body",{"_index":273,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":490,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":488,"title":{},"body":{"modules.html":{}}}],["building",{"_index":436,"title":{},"body":{"index.html":{}}}],["business",{"_index":378,"title":{},"body":{"injectables/UsersService.html":{}}}],["character",{"_index":199,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":194,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["class",{"_index":27,"title":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":31,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":295,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":297,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":296,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":368,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":369,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":370,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["compodoc/compodoc",{"_index":408,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":375,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log('controller",{"_index":287,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(createpostdto",{"_index":293,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(headers",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(ip",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(patchpostsdto",{"_index":294,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(user",{"_index":316,"title":{},"body":{"injectables/PostsService.html":{}}}],["const",{"_index":314,"title":{},"body":{"injectables/PostsService.html":{}}}],["constent",{"_index":37,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["constructor",{"_index":306,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":284,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":307,"title":{},"body":{"injectables/PostsService.html":{}}}],["content",{"_index":54,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["context",{"_index":95,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":235,"title":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('posts",{"_index":282,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":354,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":237,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":391,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["created",{"_index":292,"title":{},"body":{"controllers/PostsController.html":{}}}],["created'})@post",{"_index":254,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":243,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":246,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":30,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createprostmetaoptionsdto",{"_index":65,"title":{"classes/CreateProstMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"coverage.html":{}}}],["creates",{"_index":248,"title":{},"body":{"controllers/PostsController.html":{}}}],["createuserdto",{"_index":175,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusers",{"_index":319,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":322,"title":{},"body":{"controllers/UsersController.html":{}}}],["database",{"_index":384,"title":{},"body":{"injectables/UsersService.html":{}}}],["date",{"_index":81,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":49,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["defaultvaluepipe",{"_index":348,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":361,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":359,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":57,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":449,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":392,"title":{},"body":{"coverage.html":{}}}],["draft",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":280,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":349,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":281,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":459,"title":{},"body":{"index.html":{}}}],["each",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["edituser",{"_index":320,"title":{},"body":{"controllers/UsersController.html":{}}}],["edituser(patchuserdto",{"_index":326,"title":{},"body":{"controllers/UsersController.html":{}}}],["efficient",{"_index":437,"title":{},"body":{"index.html":{}}}],["eight",{"_index":193,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":178,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["enabled",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["endpoint",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{}}}],["entries",{"_index":338,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":424,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":93,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":55,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["existing",{"_index":267,"title":{},"body":{"controllers/PostsController.html":{}}}],["export",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["exports:[usersservice",{"_index":373,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":220,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":70,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["featured",{"_index":60,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":38,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["fetched",{"_index":335,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":331,"title":{},"body":{"controllers/UsersController.html":{}}}],["file",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":305,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":381,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":310,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":380,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":385,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":179,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":435,"title":{},"body":{"index.html":{}}}],["function",{"_index":396,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":429,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":356,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":330,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":261,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts",{"_index":244,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":260,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":431,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":321,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":328,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":205,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["grow",{"_index":466,"title":{},"body":{"index.html":{}}}],["headers",{"_index":323,"title":{},"body":{"controllers/UsersController.html":{}}}],["here",{"_index":477,"title":{},"body":{"index.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":63,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":484,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":96,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org\\\",\\r\\n",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":209,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/UsersService.html":{}}}],["id:number",{"_index":227,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["identifier",{"_index":393,"title":{},"body":{"coverage.html":{}}}],["identifire",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image",{"_index":61,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{}}}],["imports:[usersmodule",{"_index":301,"title":{},"body":{"modules/PostsModule.html":{}}}],["index",{"_index":34,"title":{"index.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":302,"title":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":303,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["installation",{"_index":445,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":447,"title":{},"body":{"index.html":{}}}],["ip",{"_index":324,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":201,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":182,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus)@isnotempty()@apiproperty({enum",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype)@isnotempty()@apiproperty({description",{"_index":74,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":215,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isiso8601()@isoptional()@apipropertyoptional({description",{"_index":82,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson()@isoptional()@apipropertyoptional({description",{"_index":88,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isarray()@isstring({each",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isarray()@validatenested({each",{"_index":66,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":171,"title":{},"body":{"classes/CreateProstMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@matches(/^[a",{"_index":99,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@matches(/^(?=.*[a",{"_index":188,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":184,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@apipropertyoptional({description",{"_index":50,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":186,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@minlength(4)@isnotempty()@apiproperty({description",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring({each",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isurl",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isurl()@isoptional()@apipropertyoptional({description",{"_index":59,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":71,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["john",{"_index":387,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":388,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":473,"title":{},"body":{"index.html":{}}}],["json",{"_index":90,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":481,"title":{},"body":{"index.html":{}}}],["key",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{}}}],["lastname",{"_index":180,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":196,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":104,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":487,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":463,"title":{},"body":{"index.html":{}}}],["limit",{"_index":329,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["list",{"_index":332,"title":{},"body":{"controllers/UsersController.html":{}}}],["matches",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":204,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maxlength",{"_index":202,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":203,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":102,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":39,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["method",{"_index":383,"title":{},"body":{"injectables/UsersService.html":{}}}],["methods",{"_index":241,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":192,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["miscellaneous",{"_index":423,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":462,"title":{},"body":{"index.html":{}}}],["mode",{"_index":453,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":476,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":482,"title":{},"body":{"index.html":{}}}],["name",{"_index":257,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":442,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":486,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":232,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["nestjs/swagger/dist",{"_index":353,"title":{},"body":{"controllers/UsersController.html":{}}}],["nestjs/swagger/dist/decorators",{"_index":216,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{}}}],["new",{"_index":56,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":434,"title":{},"body":{"index.html":{}}}],["npm",{"_index":446,"title":{},"body":{"index.html":{}}}],["number",{"_index":197,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":91,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["one",{"_index":195,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":464,"title":{},"body":{"index.html":{}}}],["operations",{"_index":379,"title":{},"body":{"injectables/UsersService.html":{}}}],["option",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":36,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options.dto",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":170,"title":{},"body":{"classes/CreateProstMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":172,"title":{},"body":{"classes/CreateProstMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":173,"title":{},"body":{"classes/CreateProstMetaOptionsDto.html":{}}}],["out",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":491,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":407,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":77,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":272,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('userid",{"_index":286,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":350,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":208,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":214,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":256,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":347,"title":{},"body":{"controllers/UsersController.html":{}}}],["partialtype",{"_index":225,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":221,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":230,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["pased",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":181,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["patch",{"_index":274,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch()@apioperation({summary",{"_index":265,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpostdto",{"_index":218,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchpostsdto",{"_index":271,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuserdto",{"_index":228,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":340,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":377,"title":{},"body":{"injectables/UsersService.html":{}}}],["person",{"_index":97,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["please",{"_index":474,"title":{},"body":{"index.html":{}}}],["position",{"_index":343,"title":{},"body":{"controllers/UsersController.html":{}}}],["possiblr",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":53,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":249,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.dto",{"_index":226,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":33,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:113",{"_index":73,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:12",{"_index":224,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:16",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:24",{"_index":80,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:36",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:45",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:53",{"_index":58,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:61",{"_index":98,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:69",{"_index":64,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:77",{"_index":87,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:87",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":240,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":299,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":236,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":11,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":275,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":40,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":239,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":313,"title":{},"body":{"injectables/PostsService.html":{}}}],["production",{"_index":455,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":433,"title":{},"body":{"index.html":{}}}],["project",{"_index":465,"title":{},"body":{"index.html":{}}}],["properties",{"_index":35,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"properties.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/posts.service",{"_index":276,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":351,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":242,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":83,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":41,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":341,"title":{},"body":{"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":337,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":358,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":360,"title":{},"body":{"controllers/UsersController.html":{}}}],["r\\n",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":475,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":285,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":333,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":444,"title":{},"body":{"index.html":{}}}],["request",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":69,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":252,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":288,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":339,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":258,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["run",{"_index":450,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":438,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":42,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sent",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["serialize",{"_index":89,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":79,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":439,"title":{},"body":{"index.html":{}}}],["side",{"_index":440,"title":{},"body":{"index.html":{}}}],["sidebar",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["slug",{"_index":43,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":103,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":198,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":212,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":468,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":430,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":425,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":426,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["src/main.ts",{"_index":395,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":32,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":219,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":427,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":428,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":238,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:13",{"_index":262,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:29",{"_index":255,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:44",{"_index":270,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":298,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":304,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":309,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:9",{"_index":311,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":176,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":206,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":229,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":312,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":374,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:13",{"_index":382,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:30",{"_index":386,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":318,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:49",{"_index":346,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:60",{"_index":325,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:71",{"_index":327,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":300,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":371,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":451,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":454,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":456,"title":{},"body":{"index.html":{}}}],["started",{"_index":432,"title":{"index.html":{}},"body":{}}],["starter",{"_index":443,"title":{},"body":{"index.html":{}}}],["statements",{"_index":394,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":44,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":478,"title":{},"body":{"index.html":{}}}],["story",{"_index":78,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":48,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["successfuly",{"_index":253,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":290,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":469,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":489,"title":{},"body":{"modules.html":{}}}],["table",{"_index":376,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":45,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["takes",{"_index":51,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["test",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["test:covsupport",{"_index":461,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":460,"title":{},"body":{"index.html":{}}}],["tests",{"_index":458,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":467,"title":{},"body":{"index.html":{}}}],["this.postsservice.findall(userid",{"_index":289,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice.findall(getusersparamdto",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":315,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":94,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["title",{"_index":46,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["touch",{"_index":479,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@apipropertyoptional({description",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@minlength(3",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined)@apipropertyoptional({type",{"_index":67,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":485,"title":{},"body":{"index.html":{}}}],["type",{"_index":47,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.possiblr",{"_index":75,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["types",{"_index":233,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["undefined",{"_index":72,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":457,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":497,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":269,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost",{"_index":245,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostsdto",{"_index":264,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":266,"title":{},"body":{"controllers/PostsController.html":{}}}],["url",{"_index":62,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["url\"'})@apiproperty({description",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["user",{"_index":211,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{}}}],["user.dto",{"_index":234,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":177,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:14",{"_index":187,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":183,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":200,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:5",{"_index":231,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:8",{"_index":185,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":263,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":207,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users'})@apiresponse({status",{"_index":334,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":372,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":317,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":13,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":308,"title":{"injectables/UsersService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":105,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested({each",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":92,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["value:any",{"_index":174,"title":{},"body":{"classes/CreateProstMetaOptionsDto.html":{}}}],["values",{"_index":76,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":495,"title":{},"body":{"properties.html":{}}}],["void",{"_index":259,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["want",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":452,"title":{},"body":{"index.html":{}}}],["website",{"_index":483,"title":{},"body":{"index.html":{}}}],["without",{"_index":106,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["you'd",{"_index":472,"title":{},"body":{"index.html":{}}}],["you'll",{"_index":251,"title":{},"body":{"controllers/PostsController.html":{}}}],["you\\'ll",{"_index":291,"title":{},"body":{"controllers/PostsController.html":{}}}],["z0",{"_index":100,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":191,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":190,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":189,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nPostsModule\n\nPostsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\n\n@Module({\n  imports: [UsersModule, PostsModule] \n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                constent\n                            \n                            \n                                    \n                                    \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        constent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({description: 'Takes in blog post content', example: 'new blog post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()@IsOptional()@ApiPropertyOptional({description: 'takes in featured image url', example: 'http://localhost.com/images/image1.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateProstMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)@ApiPropertyOptional({type: 'array', required: false, items: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postType)@IsNotEmpty()@ApiProperty({description: ' this takes in post type.possiblr values: \"post\", \"page\", \"story\", \"series\"', example: 'blog'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()@IsOptional()@ApiPropertyOptional({description: 'Date on which the blog post was published', example: '2024-03-16T07:46:32+0000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJSON()@IsOptional()@ApiPropertyOptional({description: 'serialize your JSON object or else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@ApiProperty({description: 'takes in blog slug', example: 'my-blog'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postStatus)@IsNotEmpty()@ApiProperty({enum: postStatus, description: 'published status. possiblr values: \"draft\", \"scheduled\", \"review\", \"published\"', example: 'draft'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})@ApiPropertyOptional({description: 'An array of tags pased as string values', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(4)@IsNotEmpty()@ApiProperty({description: 'This takes in blog post title', example: 'Test Blog Title'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsISO8601, IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MinLength, ValidateNested } from 'class-validator';\nimport { postStatus } from '../enums/postStatus.enum';\nimport { postType } from '../enums/postType.enum';\nimport { CreateProstMetaOptionsDto } from './create-post-meta-options.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'This takes in blog post title',\n    example: 'Test Blog Title'\n  })\n  title: string;\n\n  @IsEnum(postType)\n  @IsNotEmpty()\n  @ApiProperty({\n    description:' this takes in post type.possiblr values: \"post\", \"page\", \"story\", \"series\"',\n    example: 'blog'\n  })\n  postType: postType;\n\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  @ApiProperty({\n    description: 'takes in blog slug',\n    example: 'my-blog'\n  })\n  slug: string;\n\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  @ApiProperty({\n    enum: postStatus,\n    description: 'published status. possiblr values: \"draft\", \"scheduled\", \"review\", \"published\"',\n    example: 'draft',\n  })\n  status: postStatus;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({\n    description: 'Takes in blog post content',\n    example: 'new blog post'\n  })\n  constent?: string;\n\n  @IsJSON()\n  @IsOptional()\n  @ApiPropertyOptional({\n    description: 'serialize your JSON object or else a validation error will be thrown',\n    example: '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\",\\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n }'\n  })\n  schema?: string;\n\n  @IsUrl()\n  @IsOptional()\n  @ApiPropertyOptional({\n    description: 'takes in featured image url',\n    example: 'http://localhost.com/images/image1.jpg' \n  })\n  featuredImageUrl: string;\n\n  @IsISO8601()\n  @IsOptional()\n  @ApiPropertyOptional({\n    description: 'Date on which the blog post was published',\n    example: '2024-03-16T07:46:32+0000'\n  })\n  publishedOn?: Date;\n\n  @IsOptional()\n  @IsArray()\n  @IsString({each: true})\n  @MinLength(3, {each: true})\n  @ApiPropertyOptional({\n    description: 'An array of tags pased as string values',\n    example: ['nestJs', 'typescript']\n  })\n  tags?: string[];\n\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({each: true})\n  @Type(() => CreateProstMetaOptionsDto)\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items:{\n      type: 'object',\n      properties:{\n        key:{\n          type: 'string',\n          description: 'Key can be any string identifire for your meta option',\n          example: 'sidebar enabled'\n        },\n        value:{\n          type: 'any',\n          description: 'Any value you want to assign to the key',\n          example: 'sidebar enabled'\n        }\n      }\n    },\n    \n  })\n  metaOptions?: CreateProstMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProstMetaOptionsDto.html":{"url":"classes/CreateProstMetaOptionsDto.html","title":"class - CreateProstMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProstMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreateProstMetaOptionsDto{\n    @IsString()\n    @IsNotEmpty()\n    key: string;\n\n    @IsNotEmpty()\n    value:any;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional, IsEmail, MinLength, MaxLength, Matches } from \"class-validator\";\n\nexport class CreateUserDto{\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    firstName: string;\n\n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(96)\n    lastName: string;\n\n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n        message:\n          'Minimum eight characters, at least one letter, one number and one special character',\n      })\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get User with specific Id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsInt, IsOptional } from \"class-validator\";\nimport { ApiPropertyOptional } from \"@nestjs/swagger/dist/decorators\";\n\nexport class GetUsersParamDto{\n    @ApiPropertyOptional({\n        description: 'Get User with specific Id',\n        example: 1234,\n    })\n    @IsOptional()\n    @IsInt()\n    @Type(() => Number)\n    id?: number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Takes in the post Id', example: '1234'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dto\";\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n    @ApiProperty({\n        description: 'Takes in the post Id',\n        example: '1234'\n    })\n    @IsInt()\n    @IsNotEmpty()\n    id:number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/patch-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto){\n    id: number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'You'll get a 201 response if your post is successfuly created'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostsDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'returns a 200 response if the post is successfuly updated'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostsDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post, Body, Patch } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger/dist/decorators';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n    constructor(private readonly postsService : PostsService){}\n\n    @Get('/:userId?')\n    public getPosts(\n        @Param('userId') userId : string\n    ){\n        console.log('controller');\n        \n        return this.postsService.findAll(userId);\n    }\n\n    @ApiOperation({\n        summary: 'Creates a new blog post'\n    })\n    @ApiResponse({\n        status: 201,\n        description: 'You\\'ll get a 201 response if your post is successfuly created'\n    })\n    @Post()\n    public createPost(\n        @Body() createPostDto: CreatePostDto\n    ){\n        console.log(createPostDto);\n        \n    }\n\n    @Patch()\n    @ApiOperation({\n        summary: 'Updates an existing blog post'\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'returns a 200 response if the post is successfuly updated'\n    })\n    public updatePost(\n        @Body() patchPostsDto : PatchPostDto\n    ){\n        console.log(patchPostsDto);\n        \n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports:[UsersModule]\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class PostsService {\n    constructor(\n        private readonly usersService: UsersService,\n    ){}\n    public findAll(userId: string){\n        const user = this.usersService.findOneById(userId)\n        console.log(user);\n        \n        return[\n            {\n                user: user,\n                title: 'test title',\n                content: 'test content'\n            },\n            {\n                user: user,\n                title: 'test title',\n                content: 'test content'\n            },\n        ]\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    Public\n                                editUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto, headers: any, ip: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    editUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users'})@ApiResponse({status: 200, description: 'Users fetched successfuly based on Query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'Number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'Position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Headers,\n  Ip,\n  Param,\n  ParseIntPipe,\n  Post,\n  Query,\n  DefaultValuePipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiTags, ApiResponse } from '@nestjs/swagger/dist';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n\n\n  constructor(private readonly usersService: UsersService){}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfuly based on Query'\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'Number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'Position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n\n    return this.usersService.findAll(getUsersParamDto, limit, page);\n    \n  }\n\n  @Post()\n  public createUsers(\n    @Body() createUserDto: CreateUserDto,\n    @Headers() headers: any,\n    @Ip() ip: any,\n  ) {\n    console.log(headers);\n    console.log(ip);\n    return 'You sent a post request to users endpoint';\n  }\n\n  @Patch()\n  public editUser(\n    @Body() patchUserDto: PatchUserDto\n  ){\n\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports:[UsersService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:13\n                        \n                    \n\n\n            \n                \n                        method to get all the users from database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\n/**\n * Class to connect to users table and perform business operations\n */\n@Injectable()\nexport class UsersService {\n\n    /**\n     * method to get all the users from database\n     * \n     */\n    public findAll(\n        getUsersParamDto : GetUsersParamDto,\n        limit: number,\n        page :number,\n    ){\n        return[\n            {\n                firstName: 'John',\n                email: 'John@Doe.com'\n            },\n            {\n                firstName: 'Alice',\n                email: 'Alice@Doe.com'\n            },\n        ]\n    }\n\n    public findOneById(id: string){\n        return {\n            firstName: 'Alice',\n            email: 'Alice@Doe.com'\n        }\n    }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreateProstMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nPostsModule\n\nPostsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
