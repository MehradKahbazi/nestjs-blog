var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.056,1,2.023]],["body/modules/AppModule.html",[0,1.609,1,3.924,2,1.327,3,1.452,4,1.762,5,1.762,6,1.452,7,1.762,8,1.762,9,2.551,10,2.551,11,3.229,12,0.033,13,3.229,14,3.229,15,2.923,16,2.423,17,1.762,18,1.762,19,0.309,20,0.267,21,0.267,22,3.062,23,3.479,24,0.58,25,0.864,26,3.062,27,3.062,28,1.762,29,1.215,30,1.327,31,3.062,32,3.062,33,1.215,34,1.327,35,3.062,36,3.062,37,2.215,38,3.062,39,0.496,40,4.21,41,3.062,42,3.062,43,2.193,44,3.062,45,3.062,46,3.062,47,3.062,48,2.215,49,3.062,50,3.062,51,3.062,52,2.551,53,2.551,54,1.963,55,0.309,56,0.015,57,0.022,58,0.022]],["title/classes/CreatePostDto.html",[56,0.016,59,1.644]],["body/classes/CreatePostDto.html",[12,0.033,19,0.14,20,0.121,21,0.121,24,0.414,33,0.914,39,0.906,43,2.137,53,1.157,54,3.479,55,0.14,56,0.015,57,0.012,58,0.012,59,1.2,60,0.602,61,4.247,62,1.005,63,0.202,64,0.763,65,2.95,66,1.771,67,3.17,68,2.133,69,2.458,70,2.967,71,2.458,72,1.891,73,2.785,74,2.752,75,2.752,76,3.62,77,0.65,78,1.29,79,1.389,80,2.303,81,2.859,82,3.004,83,1.389,84,0.984,85,1.389,86,2.321,87,1.389,88,3.516,89,1.231,90,1.2,91,1.389,92,1.389,93,2.303,94,2.303,95,2.458,96,2.303,97,1.389,98,1.627,99,2.303,100,1.389,101,1.389,102,3.432,103,1.2,104,2.303,105,1.919,106,1.389,107,1.389,108,2.303,109,4.102,110,1.476,111,1.919,112,1.919,113,1.389,114,2.2,115,1.389,116,3.418,117,2.303,118,2.303,119,2.303,120,1.389,121,1.389,122,2.303,123,2.859,124,2.95,125,2.303,126,2.303,127,2.303,128,2.303,129,1.389,130,1.389,131,1.389,132,1.157,133,2.859,134,2.859,135,1.665,136,1.919,137,1.919,138,1.919,139,1.919,140,1.919,141,1.157,142,1.389,143,2.752,144,1.389,145,1.816,146,2.303,147,2.859,148,1.919,149,1.919,150,1.389,151,1.389,152,1.389,153,2.303,154,1.389,155,2.303,156,1.389,157,1.389,158,1.919,159,1.389,160,2.95,161,1.389,162,2.303,163,1.665,164,1.665,165,2.361,166,2.785,167,2.482,168,1.919,169,1.005,170,1.005,171,1.005,172,1.389,173,0.659,174,1.157,175,1.157,176,0.89,177,0.89,178,1.005,179,2.967,180,3.142,181,0.89,182,1.389,183,1.389,184,1.389,185,1.157,186,1.157,187,1.389,188,1.157,189,1.389,190,1.389,191,1.389,192,1.157,193,1.389,194,1.005,195,1.157,196,1.389,197,1.665,198,1.389,199,1.389,200,1.157]],["title/classes/CreateProstMetaOptionsDto.html",[56,0.016,98,1.497]],["body/classes/CreateProstMetaOptionsDto.html",[12,0.032,19,0.418,20,0.362,21,0.362,24,0.418,33,2.036,39,0.671,55,0.418,56,0.026,57,0.026,58,0.026,60,1.796,63,0.603,64,1.327,78,1.072,84,0.817,86,2.223,89,1.215,98,2.433,164,3.71,165,2.953,173,1.965,176,3.289,197,4.03,201,2.036,202,3.453,203,4.145,204,4.145]],["title/classes/CreateTagDto.html",[56,0.016,205,2.283]],["body/classes/CreateTagDto.html",[12,0.033,19,0.274,20,0.237,21,0.237,24,0.39,39,0.841,54,3.149,55,0.274,56,0.019,57,0.02,58,0.02,60,1.175,63,0.395,64,1,66,1.966,68,3.259,72,2.889,73,3.562,78,1.343,82,2.559,84,1.024,86,2.54,88,2.796,95,2.26,132,2.26,133,4.092,134,4.092,135,2.796,136,3.221,137,3.221,138,3.221,139,3.221,140,3.221,141,2.26,145,1.789,164,2.796,165,2.593,166,3.149,167,3.552,168,3.221,169,1.961,170,1.961,171,1.961,173,1.286,179,3.259,180,3.552,181,1.739,185,3.221,186,2.26,192,2.26,194,1.961,205,2.796,206,4.498,207,2.26,208,1.952,209,2.712,210,2.712,211,2.712,212,2.712,213,2.712,214,2.712,215,2.712,216,2.712,217,2.712]],["title/classes/CreateUserDto.html",[56,0.016,218,1.644]],["body/classes/CreateUserDto.html",[12,0.032,19,0.31,20,0.268,21,0.268,24,0.31,39,0.84,48,3.484,55,0.31,56,0.021,57,0.022,58,0.022,60,1.331,63,0.447,64,1.091,77,1.19,78,1.342,84,1.023,86,2.538,135,3.051,165,2.985,166,2.704,167,3.751,169,2.221,170,2.221,171,2.221,173,1.456,194,3.484,218,2.197,219,4.529,220,2.221,221,3.484,222,3.484,223,4.014,224,3.072,225,3.072,226,3.072,227,3.072,228,3.072,229,3.072,230,3.072,231,5.187,232,4.219,233,4.219,234,4.219,235,4.219,236,4.219,237,4.679,238,4.219,239,4.219,240,4.219,241,3.072,242,4.219,243,5.187,244,3.072]],["title/classes/GetUsersParamDto.html",[56,0.016,245,1.816]],["body/classes/GetUsersParamDto.html",[12,0.033,19,0.379,20,0.328,21,0.328,24,0.537,30,2.088,39,0.862,55,0.379,56,0.027,57,0.025,58,0.025,60,1.626,63,0.546,64,1.247,66,1.755,77,1.502,78,0.971,82,2.511,84,0.74,145,1.367,163,3.486,166,3.09,173,1.78,178,2.715,180,3.486,245,2.774,246,4.016,247,3.09,248,3.128,249,2.116,250,3.755,251,4.821,252,3.755,253,3.755,254,3.128,255,3.128]],["title/entities/MetaOption.html",[256,1.253,257,1.367]],["body/entities/MetaOption.html",[12,0.033,19,0.308,20,0.266,21,0.266,24,0.424,34,2.429,39,0.907,55,0.308,56,0.015,57,0.022,58,0.022,63,0.444,64,1.087,77,0.861,78,1.403,84,1.07,86,1.82,89,1.361,103,2.188,114,3.316,123,3.5,197,3.473,201,2.225,249,1.53,256,1.667,257,1.82,258,1.757,259,2.543,260,4.001,261,4.001,262,4.001,263,3.053,264,3.079,265,3.053,266,1.957,267,2.693,268,3.053,269,2.543,270,4.201,271,4.201,272,3.053,273,3.053,274,4.001,275,3.053,276,2.543,277,2.693,278,3.5,279,3.5,280,1.323,281,2.208,282,2.543,283,3.053]],["title/controllers/MetaOptionsController.html",[284,1.253,285,2.023]],["body/controllers/MetaOptionsController.html",[12,0.033,19,0.357,20,0.309,21,0.309,24,0.522,25,0.999,33,1.842,34,2.011,37,2.561,39,0.573,55,0.357,56,0.018,57,0.024,58,0.024,63,0.515,66,1.289,78,0.916,84,0.698,89,1.302,98,2.775,177,2.27,201,1.842,208,1.534,284,1.405,285,2.975,286,1.405,287,2.95,288,2.27,289,3.866,290,2.417,291,2.697,292,2.417,293,2.95,294,3.541,295,1.844,296,1.844,297,2.561,298,2.27,299,1.844,300,2.862,301,2.95,302,2.95,303,3.541,304,2.27,305,2.27,306,2.038,307,2.95,308,3.541]],["title/modules/MetaOptionsModule.html",[0,1.056,11,1.816]],["body/modules/MetaOptionsModule.html",[0,1.762,2,1.591,3,1.741,4,2.113,5,2.113,6,1.741,7,3.032,8,2.113,11,3.402,12,0.033,16,2.734,17,2.113,18,2.113,19,0.37,20,0.32,21,0.32,23,2.655,24,0.582,25,1.035,28,2.113,29,1.457,33,1.886,34,1.591,55,0.37,56,0.018,57,0.024,58,0.024,201,1.457,257,1.591,285,3.377,286,1.886,300,3.079,301,3.059,302,3.059,309,3.059,310,3.059,311,3.672,312,3.672,313,2.113,314,3.672]],["title/injectables/MetaOptionsService.html",[300,1.644,315,1.497]],["body/injectables/MetaOptionsService.html",[12,0.033,19,0.331,20,0.287,21,0.287,24,0.561,25,0.926,29,1.303,33,1.752,37,2.375,39,0.715,55,0.331,56,0.016,57,0.023,58,0.023,63,0.478,66,1.608,84,0.871,89,0.778,98,2.638,177,2.105,201,1.979,208,1.913,257,1.913,280,1.423,290,2.3,291,2.598,292,2.3,293,3.678,295,2.3,296,1.711,299,1.711,300,2.3,304,2.83,305,2.105,306,1.89,313,1.89,315,2.093,316,2.105,317,4.155,318,2.736,319,3.606,320,3.284,321,3.418,322,3.284,323,4.155,324,3.284,325,2.375,326,2.375,327,2.736,328,3.284,329,1.89,330,2.375,331,3.284]],["title/classes/PatchPostDto.html",[56,0.016,332,2.023]],["body/classes/PatchPostDto.html",[12,0.033,19,0.382,20,0.33,21,0.33,24,0.539,39,0.612,55,0.382,56,0.024,57,0.025,58,0.025,59,1.97,60,1.639,62,2.736,63,0.55,64,1.253,77,1.067,78,0.979,82,2.523,84,0.746,88,3.503,89,1.147,145,1.378,163,3.503,165,2.788,173,1.794,179,3.503,181,2.425,249,2.052,255,3.152,281,2.736,292,1.97,332,3.105,333,4.036,334,4.036,335,4.844,336,3.783,337,3.783,338,3.783,339,3.152,340,2.736]],["title/classes/PatchUserDto.html",[56,0.016,341,2.023]],["body/classes/PatchUserDto.html",[12,0.032,19,0.422,20,0.365,21,0.365,24,0.52,39,0.677,55,0.422,56,0.021,57,0.027,58,0.027,60,1.811,63,0.608,64,1.334,77,1.455,84,0.824,218,2.177,220,3.023,249,2.037,292,2.177,334,4.297,339,3.482,341,3.306,342,4.297,343,5.158,344,4.18,345,3.482,346,3.482,347,3.023]],["title/entities/Post.html",[89,0.748,256,1.253]],["body/entities/Post.html",[12,0.033,19,0.185,20,0.16,21,0.16,24,0.47,30,2.02,33,1.146,34,0.796,39,0.949,43,3.006,55,0.185,56,0.009,57,0.015,58,0.015,63,0.267,64,0.747,66,2.006,67,2.971,69,3.659,70,3.652,71,2.971,72,2.286,73,2.286,75,2.578,76,2.971,77,0.518,78,1.402,84,1.087,86,2.387,89,0.845,98,0.871,103,2.631,105,2.405,114,1.85,143,3.652,174,1.531,175,1.531,176,1.178,177,1.178,188,3.884,201,0.729,249,1.051,256,1.146,257,1.75,258,1.057,264,2.286,266,3.237,267,3.7,269,1.531,277,3.33,278,1.531,279,2.405,280,0.796,281,1.329,282,2.405,313,1.057,348,1.531,349,2.286,350,3.566,351,1.837,352,2.887,353,4.041,354,1.837,355,3.366,356,1.837,357,3.371,358,3.176,359,1.531,360,1.837,361,1.837,362,2.887,363,1.837,364,4.041,365,1.837,366,1.837,367,2.887,368,1.837,369,1.837,370,2.405,371,2.088,372,1.837,373,1.837,374,2.405,375,1.837,376,2.887,377,1.837,378,2.887,379,1.837,380,1.837,381,1.837]],["title/controllers/PostsController.html",[284,1.253,382,2.023]],["body/controllers/PostsController.html",[12,0.033,19,0.229,20,0.198,21,0.198,24,0.488,25,0.641,39,0.731,54,2.896,55,0.229,56,0.011,57,0.017,58,0.017,59,2.643,63,0.331,66,1.645,74,2.458,77,1.431,78,1.168,84,0.891,89,1.281,90,1.77,145,1.645,208,1.957,249,1.238,254,1.894,284,0.902,286,0.902,288,1.457,290,1.77,291,3.014,295,2.353,296,2.643,297,1.644,298,2.609,299,1.184,306,1.308,329,2.342,332,2.896,340,2.458,382,2.179,383,1.894,384,1.644,385,4.071,386,3.399,387,4.071,388,4.071,389,2.273,390,2.273,391,3.399,392,3.399,393,4.517,394,2.273,395,4.517,396,3.763,397,2.273,398,2.273,399,2.273,400,3.391,401,2.273,402,2.273,403,3.399,404,2.273,405,2.831,406,2.273,407,2.273,408,3.399,409,3.399,410,3.763,411,3.399,412,2.273,413,3.399,414,1.894,415,2.831,416,2.831,417,1.894,418,2.12,419,1.894,420,3.391,421,3.391,422,1.894,423,1.894,424,2.273,425,2.273,426,1.894,427,2.273,428,2.273,429,2.831,430,2.273,431,2.273,432,2.273,433,2.273,434,2.273,435,2.273]],["title/modules/PostsModule.html",[0,1.056,13,1.816]],["body/modules/PostsModule.html",[0,1.711,2,1.497,3,1.638,4,1.988,5,1.988,6,1.638,7,2.944,8,1.988,12,0.033,13,3.464,15,2.947,16,2.628,17,1.988,18,1.988,19,0.349,20,0.302,21,0.302,23,2.499,24,0.598,25,0.974,28,1.988,29,1.371,34,1.497,55,0.349,56,0.017,57,0.024,58,0.024,89,0.818,201,1.371,257,1.978,286,1.812,313,1.988,382,3.279,418,3.028,419,2.878,436,2.878,437,2.878,438,3.455,439,3.455,440,3.455,441,3.455,442,2.878,443,3.455,444,3.455]],["title/injectables/PostsService.html",[315,1.497,418,1.644]],["body/injectables/PostsService.html",[12,0.033,19,0.222,20,0.192,21,0.192,24,0.525,25,0.62,29,0.872,33,1.315,34,0.952,39,0.771,43,1.145,55,0.222,56,0.011,57,0.017,58,0.017,59,2.609,63,0.32,64,0.857,66,1.617,77,1.413,78,0.569,84,0.94,89,1.052,90,1.726,201,0.872,208,1.924,249,1.207,257,0.952,280,0.952,289,2.761,290,1.726,291,2.992,292,1.726,295,2.313,296,2.078,298,1.409,299,1.145,304,2.124,305,2.124,306,2.743,307,1.831,313,1.265,315,1.571,316,1.409,319,3.961,321,3.431,323,4.332,325,2.885,326,1.589,327,2.761,329,2.296,330,3.212,340,1.589,349,2.557,384,3.623,400,2.761,405,1.831,418,1.726,442,1.831,445,1.831,446,2.761,447,2.198,448,2.375,449,4.442,450,2.198,451,2.198,452,2.198,453,3.314,454,3.314,455,2.198,456,3.314,457,3.314,458,3.314,459,3.314,460,2.198,461,3.314,462,2.198,463,3.7,464,2.198,465,2.198,466,2.198,467,2.198,468,2.198,469,2.198,470,2.198,471,2.198,472,2.198]],["title/entities/Tag.html",[256,1.253,473,2.023]],["body/entities/Tag.html",[12,0.033,19,0.252,20,0.218,21,0.218,24,0.252,39,0.972,43,2.998,55,0.252,56,0.012,57,0.019,58,0.019,63,0.363,64,0.942,68,3.109,72,2.756,73,2.756,77,1.027,78,1.465,84,1.117,86,2.493,103,2.462,114,3.364,145,1.565,208,1.862,249,1.565,256,1.445,258,1.436,260,3.581,261,3.581,262,3.581,264,2.756,266,3.221,267,3.689,274,3.581,277,3.364,280,1.081,355,3.937,357,3.794,358,3.794,359,3.033,370,3.033,371,3.417,374,3.033,473,2.334,474,2.079,475,4.299,476,2.495,477,4.299,478,2.495,479,2.495,480,2.495,481,2.495,482,2.495,483,2.495,484,2.495,485,2.495]],["title/controllers/TagsController.html",[284,1.253,486,2.023]],["body/controllers/TagsController.html",[12,0.032,19,0.465,20,0.402,21,0.402,24,0.465,25,1.299,55,0.465,56,0.023,57,0.028,58,0.028,75,3.33,284,1.827,286,1.827,288,2.952,486,3.506,487,3.836,488,4.605]],["title/modules/TagsModule.html",[0,1.056,14,1.816]],["body/modules/TagsModule.html",[0,1.738,2,1.834,12,0.033,14,2.991,19,0.427,20,0.369,21,0.369,24,0.592,25,1.194,28,2.436,29,1.68,55,0.427,56,0.021,57,0.027,58,0.027,286,2.063,473,2.713,486,3.606,489,4.233,490,4.233,491,4.233,492,4.233]],["title/entities/User.html",[30,1.367,256,1.253]],["body/entities/User.html",[12,0.033,19,0.277,20,0.239,21,0.239,24,0.393,30,1.688,39,0.951,43,2.03,48,3.278,55,0.277,56,0.014,57,0.02,58,0.02,63,0.399,64,1.008,77,1.099,78,1.402,84,1.069,86,2.415,89,1.283,103,2.967,221,3.278,222,3.278,223,3.247,249,1.651,256,1.547,258,1.578,264,2.906,266,3.164,267,3.651,276,2.284,277,3.343,280,1.188,357,4.119,358,4.119,371,2.818,384,3.278,493,2.284,494,5.696,495,2.742,496,2.742,497,2.742,498,2.742,499,2.742,500,2.742,501,3.897,502,2.742,503,3.897,504,2.742]],["title/controllers/UsersController.html",[284,1.253,505,2.023]],["body/controllers/UsersController.html",[12,0.033,19,0.211,20,0.183,21,0.183,24,0.496,25,0.591,39,0.828,55,0.211,56,0.01,57,0.016,58,0.016,63,0.305,66,1.411,74,1.516,77,1.64,78,1.002,81,3.612,82,2.258,84,0.764,89,0.918,90,1.665,103,2.258,110,3.381,145,1.791,200,2.663,208,2.022,218,2.562,245,2.831,247,2.992,284,0.832,286,0.832,288,1.344,290,1.665,291,2.815,295,2.018,296,2.018,297,1.516,298,2.484,299,1.092,306,1.206,329,2.495,341,3.153,347,2.312,396,2.663,410,2.663,414,2.663,415,3.229,416,3.229,417,3.612,420,2.663,421,2.663,422,1.746,423,1.746,426,1.746,429,1.746,448,1.837,505,2.049,506,1.746,507,3.875,508,3.875,509,3.875,510,2.096,511,4.668,512,4.668,513,2.096,514,2.096,515,2.096,516,2.096,517,4.098,518,2.096,519,3.197,520,3.197,521,3.197,522,2.096,523,3.197,524,3.197,525,2.096,526,3.197,527,3.197,528,3.197,529,2.096,530,3.197,531,3.197,532,3.197,533,2.096,534,2.096,535,1.746,536,1.746,537,1.746,538,3.875,539,2.096,540,2.096,541,2.096,542,2.096,543,2.096,544,2.096,545,2.096,546,2.096,547,2.096,548,2.096,549,2.096]],["title/modules/UsersModule.html",[0,1.056,15,1.644]],["body/modules/UsersModule.html",[0,1.75,2,1.567,3,1.715,4,2.082,5,2.082,6,1.715,7,3.01,8,2.709,12,0.033,15,3.123,16,2.709,17,2.082,18,2.082,19,0.365,20,0.316,21,0.316,24,0.579,25,1.02,28,2.082,29,1.436,30,1.567,55,0.365,56,0.018,57,0.024,58,0.024,286,1.868,448,2.96,505,3.354,537,3.014,550,3.014,551,3.014,552,3.014,553,3.618,554,3.618,555,3.014,556,3.618,557,3.618]],["title/injectables/UsersService.html",[315,1.497,448,1.497]],["body/injectables/UsersService.html",[12,0.033,19,0.227,20,0.197,21,0.197,24,0.51,25,0.635,29,0.894,30,1.754,39,0.728,52,3.746,55,0.227,56,0.02,57,0.017,58,0.017,63,0.328,66,1.637,77,1.555,84,0.887,90,1.758,110,2.595,145,0.82,208,1.948,218,2.509,221,2.928,222,2.441,237,2.812,245,2.91,247,3.361,249,0.82,280,0.976,290,1.758,291,2.872,292,1.758,295,2.342,296,2.109,299,1.173,304,2.164,305,1.444,315,1.6,316,1.444,319,3.656,321,2.882,325,2.441,326,1.629,329,2.33,330,2.928,347,1.629,446,3.373,448,1.6,463,1.877,517,3.373,535,1.877,536,1.877,555,1.877,558,1.877,559,3.376,560,2.812,561,3.376,562,3.376,563,3.376,564,3.376,565,3.376,566,2.253,567,2.253,568,4.049,569,3.376,570,2.253,571,3.376,572,2.253,573,2.253,574,4.497,575,3.376,576,2.253,577,2.253,578,2.253,579,2.253,580,2.253,581,2.253,582,4.049,583,2.253,584,2.253,585,2.253,586,2.253,587,2.253,588,2.253,589,2.253]],["title/coverage.html",[590,3.108]],["body/coverage.html",[6,1.396,12,0.033,21,0.257,30,1.276,33,1.169,34,1.775,39,0.477,56,0.028,57,0.021,58,0.021,59,1.534,61,2.453,62,2.963,89,0.971,90,1.534,98,1.396,176,1.888,201,2.022,202,2.453,205,2.129,206,2.453,207,2.453,218,1.534,219,2.453,220,2.963,245,1.695,246,2.453,247,1.888,248,2.453,256,2.022,257,1.276,259,2.453,284,2.022,285,1.888,287,2.453,300,1.534,315,2.234,317,2.453,318,2.453,332,1.888,333,2.453,341,1.888,342,2.453,348,2.453,382,1.888,383,2.453,418,1.534,445,2.453,448,1.396,473,1.888,474,2.453,486,1.888,487,2.453,493,2.453,505,1.888,506,2.453,558,2.453,560,2.453,590,2.129,591,2.945,592,2.945,593,2.945,594,2.453,595,2.945,596,6.259,597,5.544,598,5.355,599,2.945,600,2.945,601,4.097,602,2.945,603,2.945,604,2.945,605,2.945,606,2.945,607,2.945,608,2.945]],["title/dependencies.html",[3,1.799,609,2.2]],["body/dependencies.html",[3,1.941,12,0.033,25,1.155,29,1.625,56,0.025,57,0.026,58,0.026,173,1.941,178,2.96,181,2.624,280,1.773,345,3.411,346,3.411,610,4.094,611,4.094,612,5.542,613,4.094,614,4.094,615,4.094,616,4.094,617,4.094,618,4.094,619,4.094,620,4.094,621,4.094,622,4.094,623,4.094,624,4.094,625,4.094,626,4.094,627,4.094,628,4.094]],["title/miscellaneous/enumerations.html",[629,1.693,630,3.161]],["body/miscellaneous/enumerations.html",[12,0.033,57,0.026,58,0.026,63,0.601,70,3.701,89,1.212,110,3.281,111,4.264,112,4.264,116,4.264,143,3.701,147,4.264,148,4.264,149,4.264,629,2.646,630,3.439,631,4.128,632,4.128,633,4.128,634,6.24,635,4.128]],["title/miscellaneous/functions.html",[629,1.693,636,3.161]],["body/miscellaneous/functions.html",[6,2.821,12,0.029,57,0.029,58,0.029,63,0.702,594,4.022,629,3.095,636,4.022,637,4.828]],["title/index.html",[63,0.384,638,2.641,639,2.641]],["body/index.html",[12,0.033,20,0.296,57,0.023,58,0.023,82,2.642,145,1.237,158,3.761,195,2.829,321,2.177,349,2.177,590,2.456,640,3.396,641,3.396,642,4.515,643,3.396,644,3.396,645,3.396,646,3.396,647,3.396,648,3.396,649,5.072,650,3.396,651,3.396,652,5.904,653,3.396,654,3.396,655,3.396,656,5.785,657,3.396,658,3.396,659,4.515,660,3.396,661,3.396,662,3.396,663,3.396,664,4.515,665,3.396,666,3.396,667,3.396,668,4.515,669,4.515,670,3.396,671,3.396,672,3.396,673,3.396,674,3.396,675,2.829,676,3.396,677,3.396,678,3.396,679,3.396,680,3.396,681,3.396,682,3.396,683,3.396,684,3.396,685,3.396,686,3.396,687,3.396,688,3.396,689,3.396,690,3.396,691,3.396,692,2.829]],["title/modules.html",[2,1.862]],["body/modules.html",[1,2.859,2,1.932,11,2.567,12,0.028,13,2.567,14,2.567,15,2.323,57,0.028,58,0.028,675,4.975,693,5.972,694,5.972,695,6.11,696,4.46,697,4.46]],["title/overview.html",[698,3.581]],["body/overview.html",[0,1.176,1,3.954,2,1.523,3,1.667,4,2.023,5,2.023,6,1.667,7,2.023,8,2.023,9,2.929,10,2.929,11,3.275,12,0.032,13,3.426,14,2.969,15,3.101,16,2.658,17,2.023,18,2.023,57,0.024,58,0.024,60,1.523,258,2.023,286,1.395,300,2.687,309,2.929,310,2.929,316,2.254,418,2.687,436,2.929,437,2.929,448,2.823,550,2.929,551,2.929,552,2.929,698,2.929,699,3.516,700,4.62,701,3.516,702,3.516]],["title/properties.html",[64,0.981,609,2.2]],["body/properties.html",[12,0.032,57,0.029,58,0.029,64,1.231,145,1.733,349,3.05,692,3.964,703,4.759,704,4.759,705,4.759]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":596,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":704,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":597,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":600,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":598,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":599,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":601,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":604,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["1.1.26",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":543,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":359,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":529,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":255,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["1234'})@isint()@isnotempty",{"_index":337,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":252,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1})@isnotempty()@isint",{"_index":83,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.6",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":410,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":393,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":370,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3",{"_index":701,"title":{},"body":{"overview.html":{}}}],["4",{"_index":700,"title":{},"body":{"overview.html":{}}}],["4/5",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":699,"title":{},"body":{"overview.html":{}}}],["512",{"_index":374,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["5432",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["66",{"_index":602,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":702,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":605,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":494,"title":{},"body":{"entities/User.html":{}}}],["alice",{"_index":587,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":588,"title":{},"body":{"injectables/UsersService.html":{}}}],["along",{"_index":458,"title":{},"body":{"injectables/PostsService.html":{}}}],["amazing",{"_index":676,"title":{},"body":{"index.html":{}}}],["api",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":420,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":390,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":213,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":336,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apiproperty({type",{"_index":79,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":215,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":209,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":211,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":250,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["apiquery",{"_index":538,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":421,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":422,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":425,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":541,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":654,"title":{},"body":{"index.html":{}}}],["applications",{"_index":648,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":102,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["async",{"_index":319,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["author",{"_index":349,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":65,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["autoloadentities",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":697,"title":{},"body":{"modules.html":{}}}],["await",{"_index":330,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":677,"title":{},"body":{"index.html":{}}}],["based",{"_index":524,"title":{},"body":{"controllers/UsersController.html":{}}}],["blog",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/PostsController.html":{}}}],["body",{"_index":298,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":695,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":693,"title":{},"body":{"modules.html":{}}}],["building",{"_index":643,"title":{},"body":{"index.html":{}}}],["business",{"_index":562,"title":{},"body":{"injectables/UsersService.html":{}}}],["cascade",{"_index":282,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["cascade'})@joincolumn",{"_index":272,"title":{},"body":{"entities/MetaOption.html":{}}}],["character",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["class",{"_index":56,"title":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":60,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":309,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":310,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":436,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":438,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":437,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":550,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":552,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":551,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":277,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":266,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["compodoc/compodoc",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":559,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(patchpostsdto",{"_index":433,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":578,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor",{"_index":304,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(metaoptionsrepository",{"_index":320,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":426,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["constructor(usersrepository",{"_index":566,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":447,"title":{},"body":{"injectables/PostsService.html":{}}}],["content",{"_index":67,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["context",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":284,"title":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('meta",{"_index":303,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":424,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":488,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":540,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":286,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":590,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":292,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":307,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/PostsService.html":{}}}],["create(createpostdto",{"_index":451,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createprostmetaoptionsdto",{"_index":293,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["created",{"_index":431,"title":{},"body":{"controllers/PostsController.html":{}}}],["created'})@post",{"_index":397,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdate",{"_index":260,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":262,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createpost",{"_index":385,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":389,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":59,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createprostmetaoptionsdto",{"_index":98,"title":{"classes/CreateProstMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["creates",{"_index":391,"title":{},"body":{"controllers/PostsController.html":{}}}],["createtagdto",{"_index":205,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["createuser",{"_index":564,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":569,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":218,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":581,"title":{},"body":{"injectables/UsersService.html":{}}}],["createusers",{"_index":507,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":510,"title":{},"body":{"controllers/UsersController.html":{}}}],["creating",{"_index":453,"title":{},"body":{"injectables/PostsService.html":{}}}],["database",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":78,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":364,"title":{},"body":{"entities/Post.html":{}}}],["defaultvaluepipe",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":545,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":84,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":400,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["delete(id",{"_index":454,"title":{},"body":{"injectables/PostsService.html":{}}}],["deleteat",{"_index":475,"title":{},"body":{"entities/Tag.html":{}}}],["deleted",{"_index":472,"title":{},"body":{"injectables/PostsService.html":{}}}],["deletedatecolumn",{"_index":477,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":386,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":434,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":399,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleting",{"_index":456,"title":{},"body":{"injectables/PostsService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":655,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":591,"title":{},"body":{"coverage.html":{}}}],["draft",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":299,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":535,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":423,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":665,"title":{},"body":{"index.html":{}}}],["each",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":353,"title":{},"body":{"entities/Post.html":{}}}],["edituser",{"_index":508,"title":{},"body":{"controllers/UsersController.html":{}}}],["edituser(patchuserdto",{"_index":514,"title":{},"body":{"controllers/UsersController.html":{}}}],["efficient",{"_index":644,"title":{},"body":{"index.html":{}}}],["eight",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["enabled",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["entities",{"_index":258,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entities:[user",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":256,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":526,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":630,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/posttype.enum",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["error",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":82,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["existing",{"_index":409,"title":{},"body":{"controllers/PostsController.html":{}}}],["existinguser",{"_index":579,"title":{},"body":{"injectables/UsersService.html":{}}}],["export",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["exports:[usersservice",{"_index":557,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":334,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":103,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["featured",{"_index":93,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimage",{"_index":350,"title":{},"body":{"entities/Post.html":{}}}],["featuredimageurl",{"_index":68,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["fetched",{"_index":523,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":519,"title":{},"body":{"controllers/UsersController.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":446,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":572,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":459,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":565,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":575,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":642,"title":{},"body":{"index.html":{}}}],["function",{"_index":595,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":636,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":542,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":518,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":403,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts",{"_index":387,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":402,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":638,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":509,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":516,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":245,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":696,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":672,"title":{},"body":{"index.html":{}}}],["headers",{"_index":511,"title":{},"body":{"controllers/UsersController.html":{}}}],["here",{"_index":683,"title":{},"body":{"index.html":{}}}],["host",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":96,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":689,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org\\\",\\r\\n",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":249,"title":{},"body":{"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["id:number",{"_index":281,"title":{},"body":{"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{}}}],["identifier",{"_index":592,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":94,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{}}}],["imports:[typeormmodule.forfeature([tag",{"_index":492,"title":{},"body":{"modules/TagsModule.html":{}}}],["imports:[typeormmodule.forfeature([user",{"_index":556,"title":{},"body":{"modules/UsersModule.html":{}}}],["imports:[usersmodule",{"_index":443,"title":{},"body":{"modules/PostsModule.html":{}}}],["index",{"_index":63,"title":{"index.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["injectable",{"_index":315,"title":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":316,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":463,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":326,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":327,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":466,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(user",{"_index":577,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":651,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":653,"title":{},"body":{"index.html":{}}}],["integer",{"_index":80,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ip",{"_index":512,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus)@isnotempty()@apiproperty({enum",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype)@isnotempty()@apiproperty({description",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isiso8601()@isoptional()@apipropertyoptional({description",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isjson()@isnotempty",{"_index":203,"title":{},"body":{"classes/CreateProstMetaOptionsDto.html":{}}}],["isjson()@isoptional()@apipropertyoptional({description",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isarray()@isstring({each",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isarray()@validatenested({each",{"_index":100,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@maxlength(256)@matches(/^[a",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96)@matches(/^(?=.*[a",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@apipropertyoptional({description",{"_index":87,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@minlength(4)@maxlength(512)@isnotempty()@apiproperty({description",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring({each",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isurl",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isurl()@isoptional()@maxlength(1024)@apipropertyoptional({description",{"_index":92,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":104,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["john",{"_index":585,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":586,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":679,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":278,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["json",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["kamil",{"_index":686,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["lastname:string",{"_index":504,"title":{},"body":{"entities/User.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":358,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["length:1024",{"_index":381,"title":{},"body":{"entities/Post.html":{}}}],["letter",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["license",{"_index":692,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":669,"title":{},"body":{"index.html":{}}}],["limit",{"_index":517,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["list",{"_index":520,"title":{},"body":{"controllers/UsersController.html":{}}}],["localhost",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["manytoone",{"_index":376,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":351,"title":{},"body":{"entities/Post.html":{}}}],["matches",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maxlength",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mehtod",{"_index":571,"title":{},"body":{"injectables/UsersService.html":{}}}],["message",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metadata",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["metallica1993",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["metaoption",{"_index":257,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptions",{"_index":69,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["metaoptions.post",{"_index":362,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":285,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":11,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":323,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":300,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":574,"title":{},"body":{"injectables/UsersService.html":{}}}],["methods",{"_index":290,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["miscellaneous",{"_index":629,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":668,"title":{},"body":{"index.html":{}}}],["mode",{"_index":659,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":682,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":687,"title":{},"body":{"index.html":{}}}],["name",{"_index":208,"title":{},"body":{"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":649,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":691,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":345,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["nestjs/swagger/dist",{"_index":539,"title":{},"body":{"controllers/UsersController.html":{}}}],["nestjs/swagger/dist/decorators",{"_index":254,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{}}}],["nestjs/typeorm",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":90,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newuser",{"_index":582,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":641,"title":{},"body":{"index.html":{}}}],["npm",{"_index":652,"title":{},"body":{"index.html":{}}}],["null",{"_index":99,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":267,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":77,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ondelete",{"_index":271,"title":{},"body":{"entities/MetaOption.html":{}}}],["one",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":503,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":500,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":279,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":269,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":670,"title":{},"body":{"index.html":{}}}],["operations",{"_index":563,"title":{},"body":{"injectables/UsersService.html":{}}}],["option.entity",{"_index":313,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":259,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:13",{"_index":268,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:16",{"_index":263,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:19",{"_index":275,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:25",{"_index":273,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:7",{"_index":265,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":66,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":289,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/PostsService.html":{}}}],["options.controller",{"_index":312,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":287,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:15",{"_index":294,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["options.dto.ts",{"_index":202,"title":{},"body":{"classes/CreateProstMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":204,"title":{},"body":{"classes/CreateProstMetaOptionsDto.html":{}}}],["options.module",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":311,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":302,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":318,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:18",{"_index":324,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":322,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"entities/Post.html":{},"coverage.html":{}}}],["options/meta",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":317,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":698,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":609,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":414,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('userid",{"_index":427,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":248,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":253,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":295,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":416,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["partialtype",{"_index":339,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":335,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":343,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["pased",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":415,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch()@apioperation({summary",{"_index":407,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpostdto",{"_index":332,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchpostsdto",{"_index":413,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuserdto",{"_index":341,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":528,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":561,"title":{},"body":{"injectables/UsersService.html":{}}}],["person",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":680,"title":{},"body":{"index.html":{}}}],["port",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{}}}],["possiblr",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":89,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":392,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.author",{"_index":501,"title":{},"body":{"entities/User.html":{}}}],["post.dto",{"_index":340,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":62,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:113",{"_index":106,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:12",{"_index":338,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:122",{"_index":85,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:17",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:25",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:38",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:47",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:56",{"_index":91,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:64",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:73",{"_index":97,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:81",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:91",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":442,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":270,"title":{},"body":{"entities/MetaOption.html":{}}}],["post:post",{"_index":283,"title":{},"body":{"entities/MetaOption.html":{}}}],["postgres",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":384,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{}}}],["posts.controller",{"_index":440,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":382,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":13,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":449,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":418,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":380,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":70,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":379,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":288,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":264,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":305,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":661,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":640,"title":{},"body":{"index.html":{}}}],["project",{"_index":671,"title":{},"body":{"index.html":{}}}],["properties",{"_index":64,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/meta",{"_index":301,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":419,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":291,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":71,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":417,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":525,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":544,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":546,"title":{},"body":{"controllers/UsersController.html":{}}}],["r\\n",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":681,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":306,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":521,"title":{},"body":{"controllers/UsersController.html":{}}}],["related",{"_index":457,"title":{},"body":{"injectables/PostsService.html":{}}}],["repository",{"_index":321,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["required",{"_index":81,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":395,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":329,"title":{},"body":{"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":527,"title":{},"body":{"controllers/UsersController.html":{}}}],["returning",{"_index":461,"title":{},"body":{"injectables/PostsService.html":{}}}],["returns",{"_index":296,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["run",{"_index":656,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":645,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":72,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["serialize",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":646,"title":{},"body":{"index.html":{}}}],["side",{"_index":647,"title":{},"body":{"index.html":{}}}],["sidebar",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["slug",{"_index":73,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["special",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":251,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":674,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":637,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":631,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":632,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["src/main.ts",{"_index":594,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":201,"title":{},"body":{"classes/CreateProstMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":61,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":333,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":633,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":635,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":276,"title":{},"body":{"entities/MetaOption.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":348,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:12",{"_index":361,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:19",{"_index":375,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:27",{"_index":366,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:35",{"_index":372,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:43",{"_index":365,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:49",{"_index":356,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:55",{"_index":369,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:62",{"_index":360,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:68",{"_index":368,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:74",{"_index":363,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:79",{"_index":354,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:82",{"_index":373,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":383,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:13",{"_index":404,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:32",{"_index":398,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:48",{"_index":412,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:56",{"_index":401,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":439,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":445,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:10",{"_index":450,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:26",{"_index":462,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:34",{"_index":452,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:48",{"_index":460,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:60",{"_index":455,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":206,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts",{"_index":474,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:14",{"_index":482,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:22",{"_index":484,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:28",{"_index":479,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:34",{"_index":483,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:41",{"_index":480,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:44",{"_index":476,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:47",{"_index":485,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:50",{"_index":478,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:6",{"_index":481,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":487,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.module.ts",{"_index":489,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":246,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":342,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":464,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":558,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:11",{"_index":567,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:26",{"_index":570,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:43",{"_index":573,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:65",{"_index":576,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":377,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":493,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:14",{"_index":496,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:21",{"_index":498,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:29",{"_index":495,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:36",{"_index":499,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:39",{"_index":502,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:7",{"_index":497,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":506,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:49",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:60",{"_index":513,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":515,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":441,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":553,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":657,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":660,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":662,"title":{},"body":{"index.html":{}}}],["started",{"_index":639,"title":{"index.html":{}},"body":{}}],["starter",{"_index":650,"title":{},"body":{"index.html":{}}}],["statements",{"_index":593,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":74,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":684,"title":{},"body":{"index.html":{}}}],["story",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":86,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["successfuly",{"_index":396,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":429,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":675,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":694,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":560,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":473,"title":{"entities/Tag.html":{}},"body":{"entities/Tag.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tag.dto.ts",{"_index":207,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:19",{"_index":214,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:32",{"_index":217,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:37",{"_index":210,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:42",{"_index":216,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:48",{"_index":212,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":491,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags",{"_index":75,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/TagsController.html":{}}}],["tags.controller",{"_index":490,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/tags.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":486,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":14,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["takes",{"_index":88,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["test",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["test:covsupport",{"_index":667,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":666,"title":{},"body":{"index.html":{}}}],["tests",{"_index":664,"title":{},"body":{"index.html":{}}}],["text",{"_index":355,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":673,"title":{},"body":{"index.html":{}}}],["this.metaoptionsrepository.create(createprostmetaoptionsdto",{"_index":328,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.save(metaoption",{"_index":331,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createprostmetaoptionsdto",{"_index":308,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postsrepository.create({...createpostdto",{"_index":468,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":471,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":470,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":469,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":432,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":435,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":428,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":583,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":580,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby({id",{"_index":589,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":584,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getusersparamdto",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(createpostdto.authorid",{"_index":467,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["timestamp",{"_index":367,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":76,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["touch",{"_index":685,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@apipropertyoptional({description",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@minlength(3",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined)@apipropertyoptional({type",{"_index":101,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":690,"title":{},"body":{"index.html":{}}}],["type",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.possiblr",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["type:'enum",{"_index":378,"title":{},"body":{"entities/Post.html":{}}}],["typeorm",{"_index":280,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":314,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":444,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forrootasync",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":346,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["undefined",{"_index":105,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["unique",{"_index":371,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":663,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":325,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":705,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":411,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatedate",{"_index":261,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":274,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":388,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostsdto",{"_index":406,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":408,"title":{},"body":{"controllers/PostsController.html":{}}}],["url",{"_index":95,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url\"'})@apiproperty({description",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["usefactory",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":30,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"classes/GetUsersParamDto.html":{},"entities/Post.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":347,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:14",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:29",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:5",{"_index":344,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.dto.ts:8",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":555,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.posts",{"_index":352,"title":{},"body":{"entities/Post.html":{}}}],["userid",{"_index":405,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":247,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users'})@apiresponse({status",{"_index":522,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":554,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":505,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":465,"title":{},"body":{"injectables/PostsService.html":{}}}],["usersmodule",{"_index":15,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":568,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":448,"title":{"injectables/UsersService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["validatenested",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested({each",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateProstMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":634,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["values",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":357,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["version",{"_index":703,"title":{},"body":{"properties.html":{}}}],["void",{"_index":297,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["want",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":658,"title":{},"body":{"index.html":{}}}],["website",{"_index":688,"title":{},"body":{"index.html":{}}}],["without",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["you'd",{"_index":678,"title":{},"body":{"index.html":{}}}],["you'll",{"_index":394,"title":{},"body":{"controllers/PostsController.html":{}}}],["you\\'ll",{"_index":430,"title":{},"body":{"controllers/PostsController.html":{}}}],["z0",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\n\n@Module({\n  imports: [UsersModule, PostsModule,\n  TypeOrmModule.forRootAsync({\n    imports:[],\n    inject:[],\n    useFactory: () => ({\n      type: 'postgres',\n      // entities:[User],\n      autoLoadEntities: true,\n      synchronize: true,\n      port: 5432,\n      username: 'postgres',\n      password: 'Metallica1993',\n      host: 'localhost',\n      database: 'nestjs-blog'\n    })\n  }),\n  TagsModule,\n  MetaOptionsModule\n  ] \n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'integer', required: true, example: 1})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({description: 'Takes in blog post content', example: 'new blog post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()@IsOptional()@MaxLength(1024)@ApiPropertyOptional({description: 'takes in featured image url', example: 'http://localhost.com/images/image1.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateProstMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)@ApiPropertyOptional({type: 'array', required: false, items: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postType)@IsNotEmpty()@ApiProperty({description: ' this takes in post type.possiblr values: \"post\", \"page\", \"story\", \"series\"', example: 'blog'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()@IsOptional()@ApiPropertyOptional({description: 'Date on which the blog post was published', example: '2024-03-16T07:46:32+0000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJSON()@IsOptional()@ApiPropertyOptional({description: 'serialize your JSON object or else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MaxLength(256)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@ApiProperty({description: 'takes in blog slug', example: 'my-blog'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postStatus)@IsNotEmpty()@ApiProperty({enum: postStatus, description: 'published status. possiblr values: \"draft\", \"scheduled\", \"review\", \"published\"', example: 'draft'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})@ApiPropertyOptional({description: 'An array of tags pased as string values', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()@ApiProperty({description: 'This takes in blog post title', example: 'Test Blog Title'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsISO8601, IsInt, IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MaxLength, MinLength, ValidateNested } from 'class-validator';\nimport { postStatus } from '../enums/postStatus.enum';\nimport { postType } from '../enums/postType.enum';\nimport { CreateProstMetaOptionsDto } from '../../meta-options/dtos/create-post-meta-options.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'This takes in blog post title',\n    example: 'Test Blog Title'\n  })\n  title: string;\n\n  @IsEnum(postType)\n  @IsNotEmpty()\n  @ApiProperty({\n    description:' this takes in post type.possiblr values: \"post\", \"page\", \"story\", \"series\"',\n    example: 'blog'\n  })\n  postType: postType;\n\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  @ApiProperty({\n    description: 'takes in blog slug',\n    example: 'my-blog'\n  })\n  slug: string;\n\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  @ApiProperty({\n    enum: postStatus,\n    description: 'published status. possiblr values: \"draft\", \"scheduled\", \"review\", \"published\"',\n    example: 'draft',\n  })\n  status: postStatus;\n\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({\n    description: 'Takes in blog post content',\n    example: 'new blog post'\n  })\n  content?: string;\n\n  @IsJSON()\n  @IsOptional()\n  @ApiPropertyOptional({\n    description: 'serialize your JSON object or else a validation error will be thrown',\n    example: '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\",\\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n }'\n  })\n  schema?: string;\n\n  @IsUrl()\n  @IsOptional()\n  @MaxLength(1024)\n  @ApiPropertyOptional({\n    description: 'takes in featured image url',\n    example: 'http://localhost.com/images/image1.jpg' \n  })\n  featuredImageUrl: string;\n\n  @IsISO8601()\n  @IsOptional()\n  @ApiPropertyOptional({\n    description: 'Date on which the blog post was published',\n    example: '2024-03-16T07:46:32+0000'\n  })\n  publishedOn?: Date;\n\n  @IsOptional()\n  @IsArray()\n  @IsString({each: true})\n  @MinLength(3, {each: true})\n  @ApiPropertyOptional({\n    description: 'An array of tags pased as string values',\n    example: ['nestJs', 'typescript']\n  })\n  tags?: string[];\n\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({each: true})\n  @Type(() => CreateProstMetaOptionsDto)\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items:{\n      type: 'object',\n      properties:{\n        metaValue:{\n          type: 'json',\n          description: 'MetaValue is a json string',\n          example: '{\"sidebar-enabled\": \"true\"}'\n        },\n       \n      }\n    },\n    \n  })\n  metaOptions?: CreateProstMetaOptionsDto | null;\n\n  @ApiProperty({\n    type: 'integer',\n    required: true,\n    example: 1\n  })\n  @IsNotEmpty()\n  @IsInt()\n  authorId: number;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProstMetaOptionsDto.html":{"url":"classes/CreateProstMetaOptionsDto.html","title":"class - CreateProstMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProstMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJSON()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from \"class-validator\";\n\nexport class CreateProstMetaOptionsDto{\n    @IsJSON()\n    @IsNotEmpty()\n    metaValue: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MaxLength(256)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@ApiProperty({description: 'takes in blog slug', example: 'my-blog'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n    IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  @ApiProperty({\n    description: 'takes in blog slug',\n    example: 'my-blog',\n  })\n  slug: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional, IsEmail, MinLength, MaxLength, Matches } from \"class-validator\";\n\nexport class CreateUserDto{\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    firstName: string;\n\n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(96)\n    lastName: string;\n\n    @IsEmail()\n    @IsNotEmpty()\n    @MaxLength(96)\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n        message:\n          'Minimum eight characters, at least one letter, one number and one special character',\n      })\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get User with specific Id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsInt, IsOptional } from \"class-validator\";\nimport { ApiPropertyOptional } from \"@nestjs/swagger/dist/decorators\";\n\nexport class GetUsersParamDto{\n    @ApiPropertyOptional({\n        description: 'Get User with specific Id',\n        example: 1234,\n    })\n    @IsOptional()\n    @IsInt()\n    @Type(() => Number)\n    id?: number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/posts/post.entity\";\nimport { Column, CreateDateColumn, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class MetaOption{\n    @PrimaryGeneratedColumn()\n    id:number;\n\n    @Column({\n        type: 'json',\n        nullable: false,\n    })\n    metaValue: string;\n\n    @CreateDateColumn()\n    createDate: Date;\n\n    @UpdateDateColumn()\n    updateDate: Date\n\n    @OneToOne(() => Post, (post) => post.metaOptions, {\n        onDelete: 'CASCADE'\n    })\n    @JoinColumn()\n    post:Post;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProstMetaOptionsDto: CreateProstMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProstMetaOptionsDto\n                                            \n                                                            CreateProstMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Post } from '@nestjs/common';\nimport { CreateProstMetaOptionsDto } from './dtos/create-post-meta-options.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n    constructor(\n        /**\n         * inject MetaOptionsService\n         */\n\n        private readonly metaOptionsService: MetaOptionsService,\n    ){}\n    @Post()\n    public create(@Body() createProstMetaOptionsDto: CreateProstMetaOptionsDto){\n        this.metaOptionsService.create(createProstMetaOptionsDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService]\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createProstMetaOptionsDto: CreateProstMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProstMetaOptionsDto\n                                            \n                                                            CreateProstMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateProstMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\nimport { Repository } from 'typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n    constructor(\n        /**\n         * Inject metaOptionsRepository\n         */\n        @InjectRepository(MetaOption)\n        private readonly metaOptionsRepository: Repository\n    ){}\n\n\n    public async create(createProstMetaOptionsDto: CreateProstMetaOptionsDto){\n\n        let metaOption = this.metaOptionsRepository.create(createProstMetaOptionsDto)\n        return await this.metaOptionsRepository.save(metaOption);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Takes in the post Id', example: '1234'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dto\";\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n    @ApiProperty({\n        description: 'Takes in the post Id',\n        example: '1234'\n    })\n    @IsInt()\n    @IsNotEmpty()\n    id:number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/patch-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto){\n    id: number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postStatus\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { postType } from \"./enums/postType.enum\";\nimport { postStatus } from \"./enums/postStatus.enum\";\nimport { CreateProstMetaOptionsDto } from \"../meta-options/dtos/create-post-meta-options.dto\";\nimport { MetaOption } from \"src/meta-options/meta-option.entity\";\nimport { User } from \"src/users/user.entity\";\n\n@Entity()\nexport class Post{\n\n    @PrimaryGeneratedColumn()\n    id:number;\n\n    @Column({\n        type: 'varchar',\n        length: 512,\n        nullable: false\n    })\n    title: string;\n\n    @Column({\n        type:'enum',\n        enum: postType,\n        nullable: false,\n        default: postType.POST\n    })\n    postType: postType;\n\n    @Column({\n        type: 'varchar',\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    slug: string;\n\n    @Column({\n        type:'enum',\n        enum: postStatus,\n        nullable: false,\n        default: postStatus.DRAFT\n    })\n    postStatus: postStatus;\n\n    @Column({\n        type: 'text',\n        nullable: true,\n    })\n    content?: string;\n\n    @Column({\n        type: 'text',\n        nullable: true\n    })\n    schema?: string;\n\n    @Column({\n        type: 'varchar',\n        length:1024,\n        nullable: true\n    })\n    featuredImage?: string;\n\n    @Column({\n        type: 'timestamp',\n        nullable: true\n    })\n    publishedOn?: Date;\n\n    @OneToOne(()=> MetaOption, (metaOptions) => metaOptions.post ,{\n        cascade: true,\n        eager: true,\n    })\n    metaOptions?: MetaOption;\n\n    @ManyToOne(() => User, (user) => user.posts, {\n        eager: true,\n    } )\n    author: User;\n\n    // \n    tags?: string[];\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'You'll get a 201 response if your post is successfuly created'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostsDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'returns a 200 response if the post is successfuly updated'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostsDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post, Body, Patch, ParseIntPipe, Query, Delete } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger/dist/decorators';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n    constructor(private readonly postsService : PostsService){}\n\n    @Get('/:userId?')\n    public getPosts(\n        @Param('userId') userId : number\n    ){\n        \n        \n        return this.postsService.findAll(userId);\n    }\n\n    \n\n    @ApiOperation({\n        summary: 'Creates a new blog post'\n    })\n    @ApiResponse({\n        status: 201,\n        description: 'You\\'ll get a 201 response if your post is successfuly created'\n    })\n\n    @Post()\n    public createPost(\n        @Body() createPostDto: CreatePostDto\n    ){\n        \n        return this.postsService.create(createPostDto);\n        \n    }\n\n    @Patch()\n    @ApiOperation({\n        summary: 'Updates an existing blog post'\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'returns a 200 response if the post is successfuly updated'\n    })\n    public updatePost(\n        @Body() patchPostsDto : PatchPostDto\n    ){\n        console.log(patchPostsDto);\n        \n    }\n\n    @Delete()\n    public deletePost(@Query('id', ParseIntPipe) id: number){\n        return this.postsService.delete(id)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports:[UsersModule, TypeOrmModule.forFeature([Post, MetaOption])]\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Readonly\n                                metaOptionsRepository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Creating new posts\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:60\n                        \n                    \n\n\n            \n                \n                        deleting a post and its related meta options along\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:48\n                        \n                    \n\n\n            \n                \n                        returning all posts\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Readonly\n                        metaOptionsRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(MetaOption)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/posts.service.ts:26\n                        \n                    \n\n            \n                \n                    injecting metaOptionsRepository\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Body } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\n\n@Injectable()\nexport class PostsService {\n    constructor(\n        /**\n         * injecting userService\n         */\n        private readonly usersService: UsersService,\n        /**\n         * injecting postsRepository\n         */\n        @InjectRepository(Post)\n        private readonly postsRepository: Repository,\n\n        /**\n         * injecting metaOptionsRepository\n         */\n        @InjectRepository(MetaOption)\n        public readonly metaOptionsRepository: Repository\n        \n    ){}\n\n    /**\n     * Creating new posts\n     */\n\n    public async create(@Body() createPostDto: CreatePostDto){\n        \n        \n        let author= await this.usersService.findOneById(createPostDto.authorId)\n\n        let post = this.postsRepository.create({...createPostDto, author: author})\n\n        return await this.postsRepository.save(post)\n    }\n\n\n    /**\n     * returning all posts\n     */\n    public async findAll(userId: number){\n        \n        \n        let posts = await this.postsRepository.find()\n\n        return posts\n    }\n\n    /**\n     * deleting a post and its related meta options along\n     */\n\n    public async delete(id: number){\n\n        await this.postsRepository.delete(id)\n\n        return {\n            deleted: true, id,\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deleteAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:47\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class Tag{\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: 'varchar',\n        length: 512,\n        nullable: false,\n        unique: true,\n    })\n    name: string;\n\n    @Column({\n        type: 'varchar',\n        length: 256,\n        nullable: false,\n        unique: true,\n    })\n    slug: string;\n\n    @Column({\n        type: 'text',\n        nullable: true,\n    })\n    description: string;\n\n    @Column({\n        type: 'text',\n        nullable: true,\n    })\n    schema: string;\n\n    @Column({\n        type: 'varchar',\n        length: 1024,\n        nullable: true,\n    })\n    featuredImageUrl: string;\n\n    @CreateDateColumn()\n    createDate: Date;\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n    @DeleteDateColumn()\n    deleteAt: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('tags')\nexport class TagsController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\n\n@Module({\n  controllers: [TagsController],\n  imports:[TypeOrmModule.forFeature([Tag])]\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/posts/post.entity\";\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: 'varchar',\n        length: 96,\n        nullable: false,\n    })\n    firstName: string;\n\n    @Column({\n        type: 'varchar',\n        length: 96,\n        nullable: false,\n    })\n    lastName:string;\n\n    @Column({\n        type: 'varchar',\n        length: 96,\n        nullable: false,\n        unique: true,\n    })\n    email: string;\n\n    @Column({\n        type: 'varchar',\n        length: 96,\n        nullable: false,\n    })\n    password: string;\n\n    @OneToMany(() => Post, (post) => post.author)\n    posts: Post[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    Public\n                                editUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto, headers: any, ip: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    editUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users'})@ApiResponse({status: 200, description: 'Users fetched successfuly based on Query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'Number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'Position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Headers,\n  Ip,\n  Param,\n  ParseIntPipe,\n  Post,\n  Query,\n  DefaultValuePipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiTags, ApiResponse } from '@nestjs/swagger/dist';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n\n\n  constructor(private readonly usersService: UsersService){}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfuly based on Query'\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'Number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'Position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n\n    return this.usersService.findAll(getUsersParamDto, limit, page);\n    \n  }\n\n  @Post()\n  public createUsers(\n    @Body() createUserDto: CreateUserDto,\n    @Headers() headers: any,\n    @Ip() ip: any,\n  ) {\n    \n    return this.usersService.createUser(createUserDto);\n  }\n\n  @Patch()\n  public editUser(\n    @Body() patchUserDto: PatchUserDto\n  ){\n\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Module({\n  imports:[TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports:[UsersService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(CreateUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:26\n                        \n                    \n\n\n            \n                \n                        mehtod to create a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                CreateUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:43\n                        \n                    \n\n\n            \n                \n                        method to get all the users from database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:65\n                        \n                    \n\n\n            \n                \n                        method to get one users from database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entity';\nimport { Repository } from 'typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\n/**\n * Class to connect to users table and perform business operations\n */\n@Injectable()\nexport class UsersService {\n\n    constructor(\n        /**\n         * Injecting usersRepository\n         */\n        @InjectRepository(User)\n        private usersRepository: Repository\n    ){}\n\n    /**\n     * \n     * mehtod to create a new user\n     */\n\n        public async createUser(CreateUserDto: CreateUserDto){\n\n            const existingUser = await this.usersRepository.findOne({\n                where:{ email: CreateUserDto.email}\n            })\n\n            let newUser = this.usersRepository.create(CreateUserDto);\n            newUser = await this.usersRepository.save(newUser)\n\n            return newUser;\n\n        }\n\n    /**\n     * method to get all the users from database\n     * \n     */\n    public findAll(\n        getUsersParamDto : GetUsersParamDto,\n        limit: number,\n        page :number,\n    ){\n        return[\n            {\n                firstName: 'John',\n                email: 'John@Doe.com'\n            },\n            {\n                firstName: 'Alice',\n                email: 'Alice@Doe.com'\n            },\n        ]\n    }\n\n    /**\n     * method to get one users from database\n     * \n     */\n\n    public async findOneById(id: number){\n       return await this.usersRepository.findOneBy({id})\n    }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreateProstMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
